(undo-tree-save-format-version . 1)
"9b1f39478a7080795ed410998f464ef62f28e544"
[nil nil nil nil (26469 21679 929201 836000) 0 nil]
([nil nil ((1214 . 1220) (1193 . 1214) (1188 . 1193) (t 26164 64028 103143 18000)) nil (26469 21679 929198 548000) 0 nil])
([nil nil ((1196 . 1198) (#("r" 0 1 (fontified t)) . -1196) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("o" 0 1 (fontified t)) . -1197) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 1198 (t 26469 21679 936622 265000)) nil (26469 21698 758777 148000) 0 nil])
([nil nil ((1193 . 1194) (t 26469 21698 764844 387000)) nil (26469 21724 735388 75000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1193) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1194 (t 26469 21724 737151 138000)) nil (26469 21755 860042 484000) 0 nil])
([nil nil ((#("    	#if caseall==\"AOAp130SDAp360SGPp040SOLn018\":
" 0 5 (fontified t) 5 6 (face font-lock-comment-delimiter-face fontified t) 6 18 (face font-lock-comment-face fontified t) 18 19 (face font-lock-comment-face syntax-table (15) fontified t) 19 47 (face font-lock-comment-face fontified t) 47 48 (face font-lock-comment-face syntax-table (15) fontified t) 48 50 (face font-lock-comment-face fontified t)) . 969) (undo-tree-id12 . -30) (undo-tree-id13 . -30) 999 (t 26469 21755 861519 246000)) nil (26469 21992 716786 675000) 0 nil])
([nil nil ((#("        #    plt.plot(dataall.iloc[:,1], dataall.iloc[:,2], ls='-', lw=2.0,
" 0 2 (fontified t) 2 8 (fontified t) 8 13 (face font-lock-comment-delimiter-face fontified t) 13 63 (face font-lock-comment-face fontified t) 63 64 (face font-lock-comment-face syntax-table (15) fontified t) 64 65 (face font-lock-comment-face fontified t) 65 66 (face font-lock-comment-face syntax-table (15) fontified t) 66 75 (face font-lock-comment-face fontified t) 75 76 (face font-lock-comment-face fontified t)) . 969) (undo-tree-id9 . -33) (undo-tree-id10 . -75) (undo-tree-id11 . -33) 1002) nil (26469 21992 716781 689000) 0 nil])
([nil nil ((#("        #             color='green', label=\"Case 04\")
" 0 8 (fontified t) 8 22 (face font-lock-comment-delimiter-face fontified t) 22 28 (face font-lock-comment-face fontified t) 28 29 (face font-lock-comment-face syntax-table (15) fontified t) 29 34 (face font-lock-comment-face fontified t) 34 35 (face font-lock-comment-face syntax-table (15) fontified t) 35 43 (face font-lock-comment-face fontified t) 43 44 (face font-lock-comment-face syntax-table (15) fontified t) 44 51 (face font-lock-comment-face fontified t) 51 52 (face font-lock-comment-face syntax-table (15) fontified t) 52 53 (face font-lock-comment-face fontified t) 53 54 (face font-lock-comment-face fontified t)) . 969) (undo-tree-id6 . -33) (undo-tree-id7 . -53) (undo-tree-id8 . -33) 1002) nil (26469 21992 716775 970000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 969)) nil (26469 21992 716761 85000) 0 nil])
([nil nil ((#("    import pdb; pdb.set_trace()
" 0 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 13 (fontified t) 13 32 (fontified t)) . 1008) (undo-tree-id0 . -28) (undo-tree-id1 . -28) (undo-tree-id2 . -28) 1036 (t 26469 21992 724335 866000)) nil (26469 33247 369251 961000) 0 nil])
([nil nil ((nil rear-nonsticky nil 567 . 568) (nil fontified nil 187 . 568) (187 . 568) (t 26469 33247 375173 773000)) nil (26469 41951 494327 836000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1905 . 1906) (nil fontified nil 1756 . 1906) (1756 . 1906) 1755) nil (26469 41951 494326 492000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1756) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) 1760) nil (26469 41951 494322 358000) 0 nil])
([nil nil ((1411 . 1415) (nil rear-nonsticky nil 1594 . 1595) (nil fontified nil 1411 . 1595) (1411 . 1595) (#("
" 0 1 (fontified t)) . -897) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 898 (897 . 898) (nil rear-nonsticky nil 896 . 897) (nil fontified nil 837 . 897) (837 . 897) (#("    " 0 4 (fontified t)) . -837) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 841 (#("    " 0 4 (fontified t)) . -841) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) 845 (836 . 845) (#("    " 0 4 (fontified t)) . -1352) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) 1356 (#("    " 0 4 (fontified t)) . -1356) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) 1360 (1351 . 1360) (#("
" 0 1 (fontified t)) . -1351) (undo-tree-id29 . -1) (undo-tree-id30 . 1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1352 (#("    " 0 4 (fontified t)) . -1352) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) 1356 (#("    " 0 4 (fontified t)) . -1356) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) 1360 (1352 . 1360) (#("        " 0 8 (fontified nil)) . 1351) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (1350 . 1360) (t 26469 41951 0 0)) nil (26528 61989 784931 69000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1416) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) 1420 (1412 . 1420) (#("    " 0 4 (fontified nil)) . 1411) (undo-tree-id58 . -3) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (1415 . 1416) (t 26528 61989 791614 608000)) nil (26528 62000 661174 718000) 0 nil])
([nil current ((1177 . 1186) (t 26528 62000 667751 593000)) nil (26528 62010 293379 190000) 0 nil])
nil
